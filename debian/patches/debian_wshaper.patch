diff --git a/wshaper b/wshaper
index 24e4c50..f0afd33 100755
--- a/wshaper
+++ b/wshaper
@@ -1,17 +1,45 @@
-#!/bin/bash 
+#!/bin/sh 
 
 # Wonder Shaper
+
+# Modifications by Vince Mulhollon for debian package
+
+if [ $# -eq 0 ]; then
+  echo Please read the man page for the wondershaper and 
+  echo the file /usr/share/doc/wondershaper/README.Debian.gz
+  exit
+fi
+
+if [ $# -eq 1 ]; then
+  /sbin/tc -s qdisc ls dev $1
+  /sbin/tc -s class ls dev $1
+  exit
+fi
+
+if [ $# -eq 2 ]; then
+  /sbin/tc qdisc del dev $2 root    2> /dev/null > /dev/null
+  /sbin/tc qdisc del dev $2 ingress 2> /dev/null > /dev/null
+  echo Wondershaper queues have been cleared.
+  exit
+fi
+
+if [ $# -ne 3 ]; then
+  echo Please read the man page for the wondershaper and
+  echo the file /usr/share/doc/wondershaper/README.Debian.gz
+  exit
+fi
+
 # please read the README before filling out these values 
 #
 # Set the following values to somewhat less than your actual download
 # and uplink speed. In kilobits. Also set the device that is to be shaped.
-DOWNLINK=800
-UPLINK=220
-DEV=eth0
+DOWNLINK=$2
+UPLINK=$3
+DEV=$1
 
 # low priority OUTGOING traffic - you can leave this blank if you want
 # low priority source netmasks
-NOPRIOHOSTSRC=80
+NOPRIOHOSTSRC=
 
 # low priority destination netmasks
 NOPRIOHOSTDST=
@@ -24,75 +52,83 @@ NOPRIOPORTDST=
 
 # Now remove the following two lines :-)
 
-echo Please read the documentation in 'README' first :-\)
-exit
+#echo Please read the documentation in 'README' first :-\)
+#exit
 
 #########################################################
 
-if [ "$1" = "status" ]
-then
-	tc -s qdisc ls dev $DEV
-	tc -s class ls dev $DEV
-	exit
-fi
+#if [ "$1" = "status" ]
+#then
+#	/sbin/tc -s qdisc ls dev $DEV
+#	/sbin/tc -s class ls dev $DEV
+#	exit
+#fi
 
 
 # clean existing down- and uplink qdiscs, hide errors
-tc qdisc del dev $DEV root    2> /dev/null > /dev/null
-tc qdisc del dev $DEV ingress 2> /dev/null > /dev/null
+/sbin/tc qdisc del dev $DEV root    2> /dev/null > /dev/null
+/sbin/tc qdisc del dev $DEV ingress 2> /dev/null > /dev/null
 
-if [ "$1" = "stop" ] 
-then 
-	exit
-fi
+#if [ "$1" = "stop" ] 
+#then 
+#	exit
+#fi
 
 ###### uplink
 
 # install root CBQ
 
-tc qdisc add dev $DEV root handle 1: cbq avpkt 1000 bandwidth 10mbit 
+/sbin/tc qdisc add dev $DEV root handle 1: cbq avpkt 1000 bandwidth 10mbit 
 
 # shape everything at $UPLINK speed - this prevents huge queues in your
 # DSL modem which destroy latency:
 # main class
 
-tc class add dev $DEV parent 1: classid 1:1 cbq rate ${UPLINK}kbit \
+/sbin/tc class add dev $DEV parent 1: classid 1:1 cbq rate ${UPLINK}kbit \
 allot 1500 prio 5 bounded isolated 
 
 # high prio class 1:10:
 
-tc class add dev $DEV parent 1:1 classid 1:10 cbq rate ${UPLINK}kbit \
+/sbin/tc class add dev $DEV parent 1:1 classid 1:10 cbq rate ${UPLINK}kbit \
    allot 1600 prio 1 avpkt 1000
 
 # bulk and default class 1:20 - gets slightly less traffic, 
 #  and a lower priority:
 
-tc class add dev $DEV parent 1:1 classid 1:20 cbq rate $[9*$UPLINK/10]kbit \
+/sbin/tc class add dev $DEV parent 1:1 classid 1:20 cbq rate $((9*$UPLINK/10))kbit \
    allot 1600 prio 2 avpkt 1000
 
 # 'traffic we hate'
 
-tc class add dev $DEV parent 1:1 classid 1:30 cbq rate $[8*$UPLINK/10]kbit \
+/sbin/tc class add dev $DEV parent 1:1 classid 1:30 cbq rate $((8*$UPLINK/10))kbit \
    allot 1600 prio 2 avpkt 1000
 
 # all get Stochastic Fairness:
-tc qdisc add dev $DEV parent 1:10 handle 10: sfq perturb 10
-tc qdisc add dev $DEV parent 1:20 handle 20: sfq perturb 10
-tc qdisc add dev $DEV parent 1:30 handle 30: sfq perturb 10
+/sbin/tc qdisc add dev $DEV parent 1:10 handle 10: sfq perturb 10
+/sbin/tc qdisc add dev $DEV parent 1:20 handle 20: sfq perturb 10
+/sbin/tc qdisc add dev $DEV parent 1:30 handle 30: sfq perturb 10
 
 # start filters
 # TOS Minimum Delay (ssh, NOT scp) in 1:10:
-tc filter add dev $DEV parent 1:0 protocol ip prio 10 u32 \
+/sbin/tc filter add dev $DEV parent 1:0 protocol ip prio 10 u32 \
       match ip tos 0x10 0xff  flowid 1:10
 
 # ICMP (ip protocol 1) in the interactive class 1:10 so we 
 # can do measurements & impress our friends:
-tc filter add dev $DEV parent 1:0 protocol ip prio 11 u32 \
+/sbin/tc filter add dev $DEV parent 1:0 protocol ip prio 11 u32 \
         match ip protocol 1 0xff flowid 1:10
 
+# pablo.iranzo@uv.es provided a patch for the MLDonkey system
+# The MLDonkey uses small UDP packets for source propogation
+# which floods the wondershaper out.
+/sbin/tc filter add dev $DEV parent 1:0 protocol ip prio 10 u32 \
+   match ip protocol 17 0xff \
+   match ip sport 4666 0xffff \
+   flowid 1:30 
+
 # prioritize small packets (<64 bytes)
 
-tc filter add dev $DEV parent 1: protocol ip prio 12 u32 \
+/sbin/tc filter add dev $DEV parent 1: protocol ip prio 12 u32 \
    match ip protocol 6 0xff \
    match u8 0x05 0x0f at 0 \
    match u16 0x0000 0xffc0 at 2 \
@@ -102,31 +138,31 @@ tc filter add dev $DEV parent 1: protocol ip prio 12 u32 \
 # some traffic however suffers a worse fate
 for a in $NOPRIOPORTDST
 do
-	tc filter add dev $DEV parent 1: protocol ip prio 14 u32 \
+	/sbin/tc filter add dev $DEV parent 1: protocol ip prio 14 u32 \
 	   match ip dport $a 0xffff flowid 1:30
 done
 
 for a in $NOPRIOPORTSRC
 do
- 	tc filter add dev $DEV parent 1: protocol ip prio 15 u32 \
+ 	/sbin/tc filter add dev $DEV parent 1: protocol ip prio 15 u32 \
 	   match ip sport $a 0xffff flowid 1:30
 done
 
 for a in $NOPRIOHOSTSRC
 do
- 	tc filter add dev $DEV parent 1: protocol ip prio 16 u32 \
+ 	/sbin/tc filter add dev $DEV parent 1: protocol ip prio 16 u32 \
 	   match ip src $a flowid 1:30
 done
 
 for a in $NOPRIOHOSTDST
 do
- 	tc filter add dev $DEV parent 1: protocol ip prio 17 u32 \
+ 	/sbin/tc filter add dev $DEV parent 1: protocol ip prio 17 u32 \
 	   match ip dst $a flowid 1:30
 done
 
 # rest is 'non-interactive' ie 'bulk' and ends up in 1:20
 
-tc filter add dev $DEV parent 1: protocol ip prio 18 u32 \
+/sbin/tc filter add dev $DEV parent 1: protocol ip prio 18 u32 \
    match ip dst 0.0.0.0/0 flowid 1:20
 
 
@@ -137,11 +173,11 @@ tc filter add dev $DEV parent 1: protocol ip prio 18 u32 \
 #
 # attach ingress policer:
 
-tc qdisc add dev $DEV handle ffff: ingress
+/sbin/tc qdisc add dev $DEV handle ffff: ingress
 
 # filter *everything* to it (0.0.0.0/0), drop everything that's
 # coming in too fast:
 
-tc filter add dev $DEV parent ffff: protocol ip prio 50 u32 match ip src \
+/sbin/tc filter add dev $DEV parent ffff: protocol ip prio 50 u32 match ip src \
    0.0.0.0/0 police rate ${DOWNLINK}kbit burst 10k drop flowid :1
 
